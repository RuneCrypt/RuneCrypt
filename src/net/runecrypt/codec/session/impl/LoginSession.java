package net.runecrypt.codec.session.impl;

import net.runecrypt.codec.Codec;
import net.runecrypt.codec.messages.LoginRequest;
import net.runecrypt.codec.messages.LoginResponse;
import net.runecrypt.codec.session.Session;
import net.runecrypt.game.World;
import net.runecrypt.game.model.player.Player;
import net.runecrypt.network.RS2PacketDecoder;
import net.runecrypt.network.RS2PacketEncoder;
import net.runecrypt.util.BufferUtils;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffers;
import org.jboss.netty.channel.ChannelFuture;
import org.jboss.netty.channel.ChannelFutureListener;
import org.jboss.netty.channel.ChannelHandlerContext;

/**
 * Created with IntelliJ IDEA.
 * User: Thomas Le Godais
 * Date: 3/7/13
 * Time: 5:15 PM
 * To change this template use File | Settings | File Templates.
 */
public class LoginSession extends Session {

    private final Codec codec;

    /**
     * Constructs a new {@code LoginSession} instance.
     *
     * @param ctx   The channel handler context for the session.
     * @param codec The current codec for the server.
     */
    public LoginSession(ChannelHandlerContext ctx, Codec codec) {
        super(ctx);
        this.codec = codec;
    }

    @Override
    public void disconnected() {

    }

    @Override
    public void message(Object obj) {
        if (!(obj instanceof LoginRequest))
            return;

        LoginRequest loginRequest = (LoginRequest) obj;
        Player player = new Player(loginRequest.getPlayerDef(), getChannel());

        int returnCode = 2;

        if (World.getInstance().getPlayer(player.playerDef.getUsername()) != null)
            returnCode = 3;
        else if (!World.getInstance().register(player, loginRequest.getLoginType())) {
            returnCode = 7;
        }

        ChannelBuffer buffer = loginRequest.getLoginType().equals(World.LoginType.LOBBY) ? encodeLobbyResponse(player.playerDef.getUsername()) : null;

        ChannelFuture future = getChannel().write(new LoginResponse(returnCode, player.playerDef.getRights(), player.getIndex(), loginRequest.getLoginType(), buffer));
        disconnected();

        if (player != null && returnCode == 2) {

            channel.getPipeline().addFirst("packetEncoder", new RS2PacketEncoder(loginRequest.getEncodingRandom(), loginRequest.getCodecManifest().requiredProtocol()));
            channel.getPipeline().addAfter("packetEncoder", "packetDecoder", new RS2PacketDecoder(loginRequest.getDecodingRandom(), codec));

            GameSession gameSession = new GameSession(getContext(), player);
            getContext().setAttachment(gameSession);

            player.sendLoginConfigs(loginRequest.getCodecManifest().requiredProtocol(), loginRequest.getLoginType());

            channel.getPipeline().remove("loginDecoder");
            channel.getPipeline().remove("loginEncoder");
        } else
            future.addListener(ChannelFutureListener.CLOSE);
    }

    /**
     * Encodes the lobby response.
     *
     * @return The lobby response.
     */
    private ChannelBuffer encodeLobbyResponse(String username) {
        ChannelBuffer buffer = ChannelBuffers.dynamicBuffer();
        buffer.writeByte(0);
        buffer.writeByte(0);
        buffer.writeByte(0);
        BufferUtils.putTriByte(buffer, 343932928);
        buffer.writeByte(0);
        buffer.writeByte(0);
        buffer.writeByte(0);
        buffer.writeLong(0);
        BufferUtils.write40BitInt(buffer, 1012908003860L);
        buffer.writeByte(0);
        buffer.writeInt(0);

        buffer.writeByte(0);
        buffer.writeInt(0);//recovery questions set date

        buffer.writeShort(1);// recovs
        buffer.writeShort(2);// unread messages.
        buffer.writeShort(0);//days since last login
        buffer.writeInt(0); //ip part

        buffer.writeByte(3); // email opcode

        buffer.writeShort(53791);
        buffer.writeShort(53791);

        buffer.writeByte(0);
        BufferUtils.writeGJString2(buffer, username);

        buffer.writeByte(0);
        buffer.writeInt(4650553);

        buffer.writeByte(1);
        buffer.writeShort(1); // default world id (should be generated by country ids like we found in client today)
        BufferUtils.writeGJString2(buffer, "127.0.0.1");
        return buffer;
    }
}
